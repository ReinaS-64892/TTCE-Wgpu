// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace net.rs64.TexTransCoreEngineForWgpu
{
    internal static unsafe partial class NativeMethod
    {
        const string __DllName = "ttce_wgpu_rust_core";



        [DllImport(__DllName, EntryPoint = "set_debug_log_pointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void set_debug_log_pointer(delegate* unmanaged[Cdecl]<ushort*, int, void> debug_log_fn_ptr);

        [DllImport(__DllName, EntryPoint = "create_tex_trans_engine_device", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* create_tex_trans_engine_device(RequestDevicePreference preference);

        [DllImport(__DllName, EntryPoint = "set_default_texture_format", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void set_default_texture_format(void* tex_trans_core_engine_ptr, TexTransCoreTextureFormat format);

        [DllImport(__DllName, EntryPoint = "drop_tex_trans_engine_device", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void drop_tex_trans_engine_device(void* tex_trans_core_engine_ptr);

        [DllImport(__DllName, EntryPoint = "register_format_convertor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void register_format_convertor(void* tex_trans_core_engine_ptr);

        [DllImport(__DllName, EntryPoint = "register_compute_shader_from_hlsl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint register_compute_shader_from_hlsl(void* tex_trans_core_engine_ptr, ushort* hlsl_path, int hlsl_path_str_len, ushort* hlsl_path_source, int hlsl_path_source_str_len);

        [DllImport(__DllName, EntryPoint = "get_ttce_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* get_ttce_context(void* tex_trans_core_engine_ptr);

        [DllImport(__DllName, EntryPoint = "drop_ttce_context", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void drop_ttce_context(void* ttce_context_ptr);

        [DllImport(__DllName, EntryPoint = "get_render_texture", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* get_render_texture(void* ttce_context_ptr, uint width, uint height, TexTransCoreTextureChannel channel);

        [DllImport(__DllName, EntryPoint = "drop_render_texture", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void drop_render_texture(void* render_texture_ptr);

        [DllImport(__DllName, EntryPoint = "get_width", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint get_width(void* render_texture_ptr);

        [DllImport(__DllName, EntryPoint = "get_height", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint get_height(void* render_texture_ptr);

        [DllImport(__DllName, EntryPoint = "copy_texture", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void copy_texture(void* ttce_context_ptr, void* dist_render_texture_ptr, void* source_render_texture_ptr);

        [DllImport(__DllName, EntryPoint = "upload_texture", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void upload_texture(void* ttce_context_ptr, void* render_texture_ptr, byte* data, int data_len, TexTransCoreTextureFormat format);

        [DllImport(__DllName, EntryPoint = "download_texture", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void download_texture(void* ttce_context_ptr, byte* write_data, int write_data_len, TexTransCoreTextureFormat format, void* render_texture_ptr);

        [DllImport(__DllName, EntryPoint = "get_compute_handler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* get_compute_handler(void* ttce_context_ptr, uint tt_compute_shader_id);

        [DllImport(__DllName, EntryPoint = "drop_compute_handler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void drop_compute_handler(void* tt_compute_handler_ptr);

        [DllImport(__DllName, EntryPoint = "get_bind_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern GetBindIndexResult get_bind_index(void* tt_compute_handler_ptr, ushort* name_ptr, int name_ptr_len);

        [DllImport(__DllName, EntryPoint = "set_render_texture", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void set_render_texture(void* tt_compute_handler_ptr, uint bind_index, void* render_texture_ptr);

        [DllImport(__DllName, EntryPoint = "upload_constants_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void upload_constants_buffer(void* tt_compute_handler_ptr, uint bind_index, byte* buffer, int buffer_len);

        [DllImport(__DllName, EntryPoint = "upload_storage_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void upload_storage_buffer(void* tt_compute_handler_ptr, uint bind_index, byte* buffer, int buffer_len);

        [DllImport(__DllName, EntryPoint = "get_work_group_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern WorkGroupSize get_work_group_size(void* tt_compute_handler_ptr);

        [DllImport(__DllName, EntryPoint = "dispatch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void dispatch(void* tt_compute_handler_ptr, uint x, uint y, uint z);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct GetBindIndexResult
    {
        [MarshalAs(UnmanagedType.U1)] public bool result;
        public uint bind_index;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct WorkGroupSize
    {
        public uint x;
        public uint y;
        public uint z;
    }


    internal enum RequestDevicePreference : uint
    {
        Auto,
        DiscreteGPU,
        IntegratedGPUOrCPU,
    }

    internal enum TexTransCoreTextureChannel : int
    {
        R = 1,
        RG = 2,
        RGBA = 4,
    }

    internal enum TexTransCoreTextureFormat : int
    {
        Byte = 0,
        UShort = 1,
        Half = 2,
        Float = 3,
    }


}
